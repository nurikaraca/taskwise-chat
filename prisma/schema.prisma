
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?         @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            UserRole?       @default(USER)
  ownedGroups     Group[]         @relation("OwnedGroups")
  memberships     UserGroup[]
  tasks           Task[]          @relation("UserTasks")
  files           File[] 
  statuses      UserTaskStatus[]
  messages        Message[]       @relation("UserMessages")

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  
  Authenticator   Authenticator[]
}

model Group {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  owner           User            @relation("OwnedGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String          @db.ObjectId
  members         UserGroup[]      
  tasks           Task[]          
  inviteLink      String?         
  inviteCode      String?        
  messages        Message[]       @relation("GroupMessages")

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Message {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  sender          User            @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId        String          @db.ObjectId
  group           Group           @relation("GroupMessages", fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String          @db.ObjectId

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}



model Task {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  status          String          @default("PENDING") 
  assignedTo      User            @relation("UserTasks", fields: [assignedToId], references: [id])
  assignedToId    String          @db.ObjectId
  group           Group           @relation(fields: [groupId], references: [id],  onDelete: Cascade)
  groupId         String          @db.ObjectId
  files           File[] 
  userStatuses    UserTaskStatus[]  
  dueDate         DateTime 

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model UserTaskStatus {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String          @db.ObjectId

  task            Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String          @db.ObjectId

  isCompleted     Boolean         @default(false)


    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, taskId])
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
 fileUrl     String
  fileId      String

  uploadedBy  String   @db.ObjectId
  user      User     @relation(fields: [uploadedBy], references: [id])

  taskId    String   @db.ObjectId
  task      Task     @relation(fields: [taskId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model UserGroup {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @db.ObjectId
  group           Group           @relation(fields: [groupId], references: [id])
  groupId         String          @db.ObjectId
  role            GroupRole       @default(USER) 
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([userId, groupId])    
}


enum GroupRole {
  ADMIN
  USER
}
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}




